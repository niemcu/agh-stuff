package czyt_pis_java;

import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Queue;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class Czytelnia  {

	int liczba_czytelnikow;
	int liczba_pisarzy;
	Condition czytelnicy;
	Condition pisarze;
	Lock lock = new ReentrantLock();
	Queue<Czytelnik> kolejkaCzytelnikow; 
	Queue<Pisarz> kolejkaPisarzy; 
	
	public Czytelnia() {
		super();
		this.liczba_czytelnikow = 0;
		this.liczba_pisarzy = 0;
		this.czytelnicy = lock.newCondition();
		this.pisarze = lock.newCondition();
		this.kolejkaCzytelnikow = new LinkedList<Czytelnik>();
		this.kolejkaPisarzy = new LinkedList<Pisarz>();
	}

	void chcePisac(Pisarz pisarz){
		System.out.println("pisarz" + pisarz.nr + ": chce pisac");
		this.kolejkaPisarzy.add(pisarz);
		if(liczba_czytelnikow+liczba_pisarzy>0){
			try {
				lock.lock();
				pisarze.await();	
				lock.unlock();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		liczba_pisarzy++;
		
	}
	
	void koniecPisania(Pisarz pisarz){
		System.out.println("pisarz" + pisarz.nr + ": koniec pisania");
		lock.lock();
		liczba_pisarzy--;
		if(!kolejkaCzytelnikow.isEmpty())
			czytelnicy.signal();
		else
			pisarze.signal();
		try {
			this.kolejkaPisarzy.remove();
		} catch (NoSuchElementException e) {
			System.out.println("zaden pisarz nie czeka");
		}
		lock.unlock();
	}
	
	void chceCzytac(Czytelnik czytelnik){
		System.out.println("czytelnik" + czytelnik.nr + ": chce czytac");
		this.kolejkaCzytelnikow.add(czytelnik);
		if(liczba_pisarzy>0 || !kolejkaPisarzy.isEmpty()){
			try {
				lock.lock();
				czytelnicy.await();	
				lock.unlock();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		liczba_czytelnikow++;
		
	}
	
	void koniecCzytania(Czytelnik czytelnik){
		System.out.println("czytelnik" + czytelnik.nr + ": koniec czytania");
		lock.lock();
		liczba_czytelnikow--;
		czytelnicy.signalAll();
		this.kolejkaCzytelnikow.remove();
		
		if(kolejkaCzytelnikow.isEmpty())
			pisarze.signal();
		
		lock.unlock();
		
	}
}